{"ast":null,"code":"var _jsxFileName = \"/Users/koume/projects/chamomile_app/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = () => setIsAuthenticated(true);\n  const logout = () => setIsAuthenticated(false);\n\n  // guestLoginメソッドの実装\n  const guestLogin = () => {\n    setIsAuthenticated(true);\n    console.log(\"ゲストとしてログインしました\");\n    // 必要に応じてゲスト用の処理を追加\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      guestLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","login","logout","guestLogin","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/koume/projects/chamomile_app/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: () => void;\n  logout: () => void;\n  guestLogin: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n\n  const login = () => setIsAuthenticated(true);\n  const logout = () => setIsAuthenticated(false);\n\n    // guestLoginメソッドの実装\n  const guestLogin = () => {\n      setIsAuthenticated(true);\n      console.log(\"ゲストとしてログインしました\");\n      // 必要に応じてゲスト用の処理を追加\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout, guestLogin }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EAEtE,MAAMU,KAAK,GAAGA,CAAA,KAAMD,kBAAkB,CAAC,IAAI,CAAC;EAC5C,MAAME,MAAM,GAAGA,CAAA,KAAMF,kBAAkB,CAAC,KAAK,CAAC;;EAE5C;EACF,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACrBH,kBAAkB,CAAC,IAAI,CAAC;IACxBI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B;EACJ,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,eAAe;MAAEE,KAAK;MAAEC,MAAM;MAAEC;IAAW,CAAE;IAAAN,QAAA,EACzEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACb,EAAA,CAlBWF,YAA+C;AAAAgB,EAAA,GAA/ChB,YAA+C;AAoB5D,OAAO,MAAMiB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGzB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACqB,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAC5E,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CAJWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}