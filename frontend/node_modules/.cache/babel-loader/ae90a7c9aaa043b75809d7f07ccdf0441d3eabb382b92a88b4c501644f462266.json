{"ast":null,"code":"var _jsxFileName = \"/Users/koume/projects/chamomile_app/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../api/apiClient'; // Axiosインスタンスをインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n\n  // ユーザー情報をバックエンドから取得\n  const fetchUser = async () => {\n    try {\n      const response = await apiClient.get('/api/v1/users/me'); // \"me\"エンドポイントから現在のユーザー情報を取得\n      setUser(response.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Failed to fetch user:', error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // 初期化時にユーザー情報を取得\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  // ログイン処理\n  const login = async credentials => {\n    try {\n      // ログインリクエストを送信\n      await apiClient.post('/users/sign_in', {\n        user: credentials\n      });\n      // ログイン成功後にユーザー情報を取得\n      await fetchUser();\n    } catch (error) {\n      console.error('Failed to login:', error);\n      throw error; // エラーを呼び出し元に伝播\n    }\n  };\n\n  // ログアウト処理\n  const logout = async () => {\n    try {\n      await apiClient.delete('/users/sign_out'); // ログアウトエンドポイントにリクエスト\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Failed to logout:', error);\n    }\n  };\n\n  // ゲストログイン\n  const guestLogin = () => {\n    setUser({\n      id: 1,\n      username: 'ゲスト',\n      cycle: undefined\n    }); // 仮のゲストデータをセット\n    setIsAuthenticated(true);\n    console.log('ゲストとしてログインしました');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      login,\n      logout,\n      guestLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Cix+uXOU60jwVTrRl9ss+REDA3M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiClient","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","fetchUser","response","get","data","error","console","login","credentials","post","logout","delete","guestLogin","id","username","cycle","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/koume/projects/chamomile_app/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport apiClient from '../api/apiClient'; // Axiosインスタンスをインポート\n\nexport interface User {\n  id: number;\n  username: string;\n  cycle?: number;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null; // ユーザー情報を保持\n  login: (user: User) => void; \n  logout: () => void;\n  guestLogin: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  // ユーザー情報をバックエンドから取得\n  const fetchUser = async () => {\n    try {\n      const response = await apiClient.get('/api/v1/users/me'); // \"me\"エンドポイントから現在のユーザー情報を取得\n      setUser(response.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Failed to fetch user:', error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // 初期化時にユーザー情報を取得\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  // ログイン処理\n  const login = async (credentials: { username: string; password: string }) => {\n    try {\n      // ログインリクエストを送信\n      await apiClient.post('/users/sign_in', {\n        user: credentials,\n      });\n      // ログイン成功後にユーザー情報を取得\n      await fetchUser();\n    } catch (error) {\n      console.error('Failed to login:', error);\n      throw error; // エラーを呼び出し元に伝播\n    }\n  };\n\n  // ログアウト処理\n  const logout = async () => {\n    try {\n      await apiClient.delete('/users/sign_out'); // ログアウトエンドポイントにリクエスト\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Failed to logout:', error);\n    }\n  };\n\n  // ゲストログイン\n  const guestLogin = () => {\n    setUser({ id: 1, username: 'ゲスト', cycle: undefined }); // 仮のゲストデータをセット\n    setIsAuthenticated(true);\n    console.log('ゲストとしてログインしました');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout, guestLogin }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}